plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'

	id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
if (grgit != null) {
	if (grgit.describe(tags: true) == "${project.mod_version}+mc${project.minecraft_version}") {
		version = "${project.mod_version}+mc${project.minecraft_version}"
	} else {
		var dirty = grgit.status().clean ? "" : "-dirty";
		version = "${project.mod_version}-dev.${grgit.head().abbreviatedId}+mc${project.minecraft_version}${dirty}"
	}
} else {
	version = "${project.mod_version}-dev.unknown+mc${project.minecraft_version}"
}
group = project.maven_group

repositories {
    maven { url "https://maven.vram.io/" }
	maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // FREX
    modImplementation("io.vram:frex-fabric-mc${project.minecraft_version.replace('.', '')}:${project.frex_vresion}")
    include("io.vram:frex-fabric-mc${project.minecraft_version.replace('.', '')}:${project.frex_vresion}:fat")

    // Fabric API
	modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))

    // For testing in dev environment
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

	modImplementation "maven.modrinth:sodium:${project.sodium_version}"

	// Transitive dependency of Sodium
	implementation("org.joml:joml:${project.joml_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
